// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ApplyBikePlateNumberRequest.proto

package com.yzh.rfid.app.request;

public final class ApplyBikePlateNumberRequest {
  private ApplyBikePlateNumberRequest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ApplyBikePlateNumberRequestMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ApplyBikePlateNumberRequestMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string session = 1;</code>
     */
    String getSession();
    /**
     * <code>optional string session = 1;</code>
     */
    com.google.protobuf.ByteString
        getSessionBytes();

    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    boolean hasBikeUserMessage();
    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    com.yzh.rfid.app.response.BikeUser.BikeUserMessage getBikeUserMessage();
    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder getBikeUserMessageOrBuilder();

    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    boolean hasBikeMessage();
    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    com.yzh.rfid.app.response.Bike.BikeMessage getBikeMessage();
    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder getBikeMessageOrBuilder();

    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    boolean hasBikeInsuranceMessage();
    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage getBikeInsuranceMessage();
    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder getBikeInsuranceMessageOrBuilder();
  }
  /**
   * <pre>
   *[公安App]申请车辆上牌消息
   * </pre>
   *
   * Protobuf type {@code ApplyBikePlateNumberRequestMessage}
   */
  public  static final class ApplyBikePlateNumberRequestMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ApplyBikePlateNumberRequestMessage)
      ApplyBikePlateNumberRequestMessageOrBuilder {
    // Use ApplyBikePlateNumberRequestMessage.newBuilder() to construct.
    private ApplyBikePlateNumberRequestMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ApplyBikePlateNumberRequestMessage() {
      session_ = "";
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private ApplyBikePlateNumberRequestMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              session_ = s;
              break;
            }
            case 18: {
              com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder subBuilder = null;
              if (bikeUserMessage_ != null) {
                subBuilder = bikeUserMessage_.toBuilder();
              }
              bikeUserMessage_ = input.readMessage(com.yzh.rfid.app.response.BikeUser.BikeUserMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bikeUserMessage_);
                bikeUserMessage_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.yzh.rfid.app.response.Bike.BikeMessage.Builder subBuilder = null;
              if (bikeMessage_ != null) {
                subBuilder = bikeMessage_.toBuilder();
              }
              bikeMessage_ = input.readMessage(com.yzh.rfid.app.response.Bike.BikeMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bikeMessage_);
                bikeMessage_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder subBuilder = null;
              if (bikeInsuranceMessage_ != null) {
                subBuilder = bikeInsuranceMessage_.toBuilder();
              }
              bikeInsuranceMessage_ = input.readMessage(com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(bikeInsuranceMessage_);
                bikeInsuranceMessage_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.internal_static_ApplyBikePlateNumberRequestMessage_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.internal_static_ApplyBikePlateNumberRequestMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.class, com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.Builder.class);
    }

    public static final int SESSION_FIELD_NUMBER = 1;
    private volatile Object session_;
    /**
     * <code>optional string session = 1;</code>
     */
    public String getSession() {
      Object ref = session_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        session_ = s;
        return s;
      }
    }
    /**
     * <code>optional string session = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSessionBytes() {
      Object ref = session_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        session_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BIKEUSERMESSAGE_FIELD_NUMBER = 2;
    private com.yzh.rfid.app.response.BikeUser.BikeUserMessage bikeUserMessage_;
    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    public boolean hasBikeUserMessage() {
      return bikeUserMessage_ != null;
    }
    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    public com.yzh.rfid.app.response.BikeUser.BikeUserMessage getBikeUserMessage() {
      return bikeUserMessage_ == null ? com.yzh.rfid.app.response.BikeUser.BikeUserMessage.getDefaultInstance() : bikeUserMessage_;
    }
    /**
     * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
     */
    public com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder getBikeUserMessageOrBuilder() {
      return getBikeUserMessage();
    }

    public static final int BIKEMESSAGE_FIELD_NUMBER = 3;
    private com.yzh.rfid.app.response.Bike.BikeMessage bikeMessage_;
    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    public boolean hasBikeMessage() {
      return bikeMessage_ != null;
    }
    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    public com.yzh.rfid.app.response.Bike.BikeMessage getBikeMessage() {
      return bikeMessage_ == null ? com.yzh.rfid.app.response.Bike.BikeMessage.getDefaultInstance() : bikeMessage_;
    }
    /**
     * <code>optional .BikeMessage bikeMessage = 3;</code>
     */
    public com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder getBikeMessageOrBuilder() {
      return getBikeMessage();
    }

    public static final int BIKEINSURANCEMESSAGE_FIELD_NUMBER = 4;
    private com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage bikeInsuranceMessage_;
    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    public boolean hasBikeInsuranceMessage() {
      return bikeInsuranceMessage_ != null;
    }
    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    public com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage getBikeInsuranceMessage() {
      return bikeInsuranceMessage_ == null ? com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.getDefaultInstance() : bikeInsuranceMessage_;
    }
    /**
     * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
     */
    public com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder getBikeInsuranceMessageOrBuilder() {
      return getBikeInsuranceMessage();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSessionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, session_);
      }
      if (bikeUserMessage_ != null) {
        output.writeMessage(2, getBikeUserMessage());
      }
      if (bikeMessage_ != null) {
        output.writeMessage(3, getBikeMessage());
      }
      if (bikeInsuranceMessage_ != null) {
        output.writeMessage(4, getBikeInsuranceMessage());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSessionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, session_);
      }
      if (bikeUserMessage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBikeUserMessage());
      }
      if (bikeMessage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getBikeMessage());
      }
      if (bikeInsuranceMessage_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getBikeInsuranceMessage());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage)) {
        return super.equals(obj);
      }
      com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage other = (com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage) obj;

      boolean result = true;
      result = result && getSession()
          .equals(other.getSession());
      result = result && (hasBikeUserMessage() == other.hasBikeUserMessage());
      if (hasBikeUserMessage()) {
        result = result && getBikeUserMessage()
            .equals(other.getBikeUserMessage());
      }
      result = result && (hasBikeMessage() == other.hasBikeMessage());
      if (hasBikeMessage()) {
        result = result && getBikeMessage()
            .equals(other.getBikeMessage());
      }
      result = result && (hasBikeInsuranceMessage() == other.hasBikeInsuranceMessage());
      if (hasBikeInsuranceMessage()) {
        result = result && getBikeInsuranceMessage()
            .equals(other.getBikeInsuranceMessage());
      }
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + SESSION_FIELD_NUMBER;
      hash = (53 * hash) + getSession().hashCode();
      if (hasBikeUserMessage()) {
        hash = (37 * hash) + BIKEUSERMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getBikeUserMessage().hashCode();
      }
      if (hasBikeMessage()) {
        hash = (37 * hash) + BIKEMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getBikeMessage().hashCode();
      }
      if (hasBikeInsuranceMessage()) {
        hash = (37 * hash) + BIKEINSURANCEMESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getBikeInsuranceMessage().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *[公安App]申请车辆上牌消息
     * </pre>
     *
     * Protobuf type {@code ApplyBikePlateNumberRequestMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ApplyBikePlateNumberRequestMessage)
        com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.internal_static_ApplyBikePlateNumberRequestMessage_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.internal_static_ApplyBikePlateNumberRequestMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.class, com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.Builder.class);
      }

      // Construct using com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        session_ = "";

        if (bikeUserMessageBuilder_ == null) {
          bikeUserMessage_ = null;
        } else {
          bikeUserMessage_ = null;
          bikeUserMessageBuilder_ = null;
        }
        if (bikeMessageBuilder_ == null) {
          bikeMessage_ = null;
        } else {
          bikeMessage_ = null;
          bikeMessageBuilder_ = null;
        }
        if (bikeInsuranceMessageBuilder_ == null) {
          bikeInsuranceMessage_ = null;
        } else {
          bikeInsuranceMessage_ = null;
          bikeInsuranceMessageBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.internal_static_ApplyBikePlateNumberRequestMessage_descriptor;
      }

      public com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage getDefaultInstanceForType() {
        return com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.getDefaultInstance();
      }

      public com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage build() {
        com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage buildPartial() {
        com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage result = new com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage(this);
        result.session_ = session_;
        if (bikeUserMessageBuilder_ == null) {
          result.bikeUserMessage_ = bikeUserMessage_;
        } else {
          result.bikeUserMessage_ = bikeUserMessageBuilder_.build();
        }
        if (bikeMessageBuilder_ == null) {
          result.bikeMessage_ = bikeMessage_;
        } else {
          result.bikeMessage_ = bikeMessageBuilder_.build();
        }
        if (bikeInsuranceMessageBuilder_ == null) {
          result.bikeInsuranceMessage_ = bikeInsuranceMessage_;
        } else {
          result.bikeInsuranceMessage_ = bikeInsuranceMessageBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage) {
          return mergeFrom((com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage other) {
        if (other == com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage.getDefaultInstance()) return this;
        if (!other.getSession().isEmpty()) {
          session_ = other.session_;
          onChanged();
        }
        if (other.hasBikeUserMessage()) {
          mergeBikeUserMessage(other.getBikeUserMessage());
        }
        if (other.hasBikeMessage()) {
          mergeBikeMessage(other.getBikeMessage());
        }
        if (other.hasBikeInsuranceMessage()) {
          mergeBikeInsuranceMessage(other.getBikeInsuranceMessage());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object session_ = "";
      /**
       * <code>optional string session = 1;</code>
       */
      public String getSession() {
        Object ref = session_;
        if (!(ref instanceof String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          String s = bs.toStringUtf8();
          session_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>optional string session = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSessionBytes() {
        Object ref = session_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          session_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string session = 1;</code>
       */
      public Builder setSession(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        session_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string session = 1;</code>
       */
      public Builder clearSession() {
        
        session_ = getDefaultInstance().getSession();
        onChanged();
        return this;
      }
      /**
       * <code>optional string session = 1;</code>
       */
      public Builder setSessionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        session_ = value;
        onChanged();
        return this;
      }

      private com.yzh.rfid.app.response.BikeUser.BikeUserMessage bikeUserMessage_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.BikeUser.BikeUserMessage, com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder, com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder> bikeUserMessageBuilder_;
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public boolean hasBikeUserMessage() {
        return bikeUserMessageBuilder_ != null || bikeUserMessage_ != null;
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public com.yzh.rfid.app.response.BikeUser.BikeUserMessage getBikeUserMessage() {
        if (bikeUserMessageBuilder_ == null) {
          return bikeUserMessage_ == null ? com.yzh.rfid.app.response.BikeUser.BikeUserMessage.getDefaultInstance() : bikeUserMessage_;
        } else {
          return bikeUserMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public Builder setBikeUserMessage(com.yzh.rfid.app.response.BikeUser.BikeUserMessage value) {
        if (bikeUserMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bikeUserMessage_ = value;
          onChanged();
        } else {
          bikeUserMessageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public Builder setBikeUserMessage(
          com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder builderForValue) {
        if (bikeUserMessageBuilder_ == null) {
          bikeUserMessage_ = builderForValue.build();
          onChanged();
        } else {
          bikeUserMessageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public Builder mergeBikeUserMessage(com.yzh.rfid.app.response.BikeUser.BikeUserMessage value) {
        if (bikeUserMessageBuilder_ == null) {
          if (bikeUserMessage_ != null) {
            bikeUserMessage_ =
              com.yzh.rfid.app.response.BikeUser.BikeUserMessage.newBuilder(bikeUserMessage_).mergeFrom(value).buildPartial();
          } else {
            bikeUserMessage_ = value;
          }
          onChanged();
        } else {
          bikeUserMessageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public Builder clearBikeUserMessage() {
        if (bikeUserMessageBuilder_ == null) {
          bikeUserMessage_ = null;
          onChanged();
        } else {
          bikeUserMessage_ = null;
          bikeUserMessageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder getBikeUserMessageBuilder() {
        
        onChanged();
        return getBikeUserMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      public com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder getBikeUserMessageOrBuilder() {
        if (bikeUserMessageBuilder_ != null) {
          return bikeUserMessageBuilder_.getMessageOrBuilder();
        } else {
          return bikeUserMessage_ == null ?
              com.yzh.rfid.app.response.BikeUser.BikeUserMessage.getDefaultInstance() : bikeUserMessage_;
        }
      }
      /**
       * <code>optional .BikeUserMessage bikeUserMessage = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.BikeUser.BikeUserMessage, com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder, com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder> 
          getBikeUserMessageFieldBuilder() {
        if (bikeUserMessageBuilder_ == null) {
          bikeUserMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.yzh.rfid.app.response.BikeUser.BikeUserMessage, com.yzh.rfid.app.response.BikeUser.BikeUserMessage.Builder, com.yzh.rfid.app.response.BikeUser.BikeUserMessageOrBuilder>(
                  getBikeUserMessage(),
                  getParentForChildren(),
                  isClean());
          bikeUserMessage_ = null;
        }
        return bikeUserMessageBuilder_;
      }

      private com.yzh.rfid.app.response.Bike.BikeMessage bikeMessage_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.Bike.BikeMessage, com.yzh.rfid.app.response.Bike.BikeMessage.Builder, com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder> bikeMessageBuilder_;
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public boolean hasBikeMessage() {
        return bikeMessageBuilder_ != null || bikeMessage_ != null;
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public com.yzh.rfid.app.response.Bike.BikeMessage getBikeMessage() {
        if (bikeMessageBuilder_ == null) {
          return bikeMessage_ == null ? com.yzh.rfid.app.response.Bike.BikeMessage.getDefaultInstance() : bikeMessage_;
        } else {
          return bikeMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public Builder setBikeMessage(com.yzh.rfid.app.response.Bike.BikeMessage value) {
        if (bikeMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bikeMessage_ = value;
          onChanged();
        } else {
          bikeMessageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public Builder setBikeMessage(
          com.yzh.rfid.app.response.Bike.BikeMessage.Builder builderForValue) {
        if (bikeMessageBuilder_ == null) {
          bikeMessage_ = builderForValue.build();
          onChanged();
        } else {
          bikeMessageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public Builder mergeBikeMessage(com.yzh.rfid.app.response.Bike.BikeMessage value) {
        if (bikeMessageBuilder_ == null) {
          if (bikeMessage_ != null) {
            bikeMessage_ =
              com.yzh.rfid.app.response.Bike.BikeMessage.newBuilder(bikeMessage_).mergeFrom(value).buildPartial();
          } else {
            bikeMessage_ = value;
          }
          onChanged();
        } else {
          bikeMessageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public Builder clearBikeMessage() {
        if (bikeMessageBuilder_ == null) {
          bikeMessage_ = null;
          onChanged();
        } else {
          bikeMessage_ = null;
          bikeMessageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public com.yzh.rfid.app.response.Bike.BikeMessage.Builder getBikeMessageBuilder() {
        
        onChanged();
        return getBikeMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      public com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder getBikeMessageOrBuilder() {
        if (bikeMessageBuilder_ != null) {
          return bikeMessageBuilder_.getMessageOrBuilder();
        } else {
          return bikeMessage_ == null ?
              com.yzh.rfid.app.response.Bike.BikeMessage.getDefaultInstance() : bikeMessage_;
        }
      }
      /**
       * <code>optional .BikeMessage bikeMessage = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.Bike.BikeMessage, com.yzh.rfid.app.response.Bike.BikeMessage.Builder, com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder> 
          getBikeMessageFieldBuilder() {
        if (bikeMessageBuilder_ == null) {
          bikeMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.yzh.rfid.app.response.Bike.BikeMessage, com.yzh.rfid.app.response.Bike.BikeMessage.Builder, com.yzh.rfid.app.response.Bike.BikeMessageOrBuilder>(
                  getBikeMessage(),
                  getParentForChildren(),
                  isClean());
          bikeMessage_ = null;
        }
        return bikeMessageBuilder_;
      }

      private com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage bikeInsuranceMessage_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder> bikeInsuranceMessageBuilder_;
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public boolean hasBikeInsuranceMessage() {
        return bikeInsuranceMessageBuilder_ != null || bikeInsuranceMessage_ != null;
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage getBikeInsuranceMessage() {
        if (bikeInsuranceMessageBuilder_ == null) {
          return bikeInsuranceMessage_ == null ? com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.getDefaultInstance() : bikeInsuranceMessage_;
        } else {
          return bikeInsuranceMessageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public Builder setBikeInsuranceMessage(com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage value) {
        if (bikeInsuranceMessageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          bikeInsuranceMessage_ = value;
          onChanged();
        } else {
          bikeInsuranceMessageBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public Builder setBikeInsuranceMessage(
          com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder builderForValue) {
        if (bikeInsuranceMessageBuilder_ == null) {
          bikeInsuranceMessage_ = builderForValue.build();
          onChanged();
        } else {
          bikeInsuranceMessageBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public Builder mergeBikeInsuranceMessage(com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage value) {
        if (bikeInsuranceMessageBuilder_ == null) {
          if (bikeInsuranceMessage_ != null) {
            bikeInsuranceMessage_ =
              com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.newBuilder(bikeInsuranceMessage_).mergeFrom(value).buildPartial();
          } else {
            bikeInsuranceMessage_ = value;
          }
          onChanged();
        } else {
          bikeInsuranceMessageBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public Builder clearBikeInsuranceMessage() {
        if (bikeInsuranceMessageBuilder_ == null) {
          bikeInsuranceMessage_ = null;
          onChanged();
        } else {
          bikeInsuranceMessage_ = null;
          bikeInsuranceMessageBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder getBikeInsuranceMessageBuilder() {
        
        onChanged();
        return getBikeInsuranceMessageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      public com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder getBikeInsuranceMessageOrBuilder() {
        if (bikeInsuranceMessageBuilder_ != null) {
          return bikeInsuranceMessageBuilder_.getMessageOrBuilder();
        } else {
          return bikeInsuranceMessage_ == null ?
              com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.getDefaultInstance() : bikeInsuranceMessage_;
        }
      }
      /**
       * <code>optional .BikeInsuranceMessage bikeInsuranceMessage = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder> 
          getBikeInsuranceMessageFieldBuilder() {
        if (bikeInsuranceMessageBuilder_ == null) {
          bikeInsuranceMessageBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessage.Builder, com.yzh.rfid.app.response.BikeInsurance.BikeInsuranceMessageOrBuilder>(
                  getBikeInsuranceMessage(),
                  getParentForChildren(),
                  isClean());
          bikeInsuranceMessage_ = null;
        }
        return bikeInsuranceMessageBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:ApplyBikePlateNumberRequestMessage)
    }

    // @@protoc_insertion_point(class_scope:ApplyBikePlateNumberRequestMessage)
    private static final com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage();
    }

    public static com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ApplyBikePlateNumberRequestMessage>
        PARSER = new com.google.protobuf.AbstractParser<ApplyBikePlateNumberRequestMessage>() {
      public ApplyBikePlateNumberRequestMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new ApplyBikePlateNumberRequestMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ApplyBikePlateNumberRequestMessage> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<ApplyBikePlateNumberRequestMessage> getParserForType() {
      return PARSER;
    }

    public com.yzh.rfid.app.request.ApplyBikePlateNumberRequest.ApplyBikePlateNumberRequestMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ApplyBikePlateNumberRequestMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ApplyBikePlateNumberRequestMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n!ApplyBikePlateNumberRequest.proto\032\016Bik" +
      "eUser.proto\032\nBike.proto\032\023BikeInsurance.p" +
      "roto\"\270\001\n\"ApplyBikePlateNumberRequestMess" +
      "age\022\017\n\007session\030\001 \001(\t\022)\n\017bikeUserMessage\030" +
      "\002 \001(\0132\020.BikeUserMessage\022!\n\013bikeMessage\030\003" +
      " \001(\0132\014.BikeMessage\0223\n\024bikeInsuranceMessa" +
      "ge\030\004 \001(\0132\025.BikeInsuranceMessageB;\n\034com.y" +
      "zh.rfid.app.requestB\033ApplyBikePlateN" +
      "umberRequestb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.yzh.rfid.app.response.BikeUser.getDescriptor(),
          com.yzh.rfid.app.response.Bike.getDescriptor(),
          com.yzh.rfid.app.response.BikeInsurance.getDescriptor(),
        }, assigner);
    internal_static_ApplyBikePlateNumberRequestMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ApplyBikePlateNumberRequestMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ApplyBikePlateNumberRequestMessage_descriptor,
        new String[] { "Session", "BikeUserMessage", "BikeMessage", "BikeInsuranceMessage", });
    com.yzh.rfid.app.response.BikeUser.getDescriptor();
    com.yzh.rfid.app.response.Bike.getDescriptor();
    com.yzh.rfid.app.response.BikeInsurance.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
